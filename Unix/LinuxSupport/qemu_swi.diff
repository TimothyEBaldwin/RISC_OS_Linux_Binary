From abec8c6e5c895d16e2ef0433120f96d57dca6e0d Mon Sep 17 00:00:00 2001
From: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Date: Thu, 23 Aug 2018 21:47:34 +0100
Subject: [PATCH 1/4] linux-user: SWI Intercept and disable FPA (for RISC OS)

Signed-off-by: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
---
 linux-user/arm/cpu_loop.c | 17 +++++++++++++++--
 linux-user/syscall_defs.h |  7 +++++++
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/linux-user/arm/cpu_loop.c b/linux-user/arm/cpu_loop.c
index cf618daa1c..ea110df5f9 100644
--- a/linux-user/arm/cpu_loop.c
+++ b/linux-user/arm/cpu_loop.c
@@ -207,6 +207,10 @@ do_kernel_trap(CPUARMState *env)
 
 void cpu_loop(CPUARMState *env)
 {
+    static bool use_nwfpe = true;
+    static abi_ulong sys_base = 0;
+    static abi_ulong sys_limit = 0xFFFFFFFF;
+
     CPUState *cs = env_cpu(env);
     int trapnr;
     unsigned int n, insn;
@@ -234,7 +238,7 @@ void cpu_loop(CPUARMState *env)
                 /* FIXME - what to do if get_user() fails? */
                 get_user_code_u32(opcode, env->regs[15], env);
 
-                rc = EmulateAll(opcode, &ts->fpa, env);
+                rc = use_nwfpe && EmulateAll(opcode, &ts->fpa, env);
                 if (rc == 0) { /* illegal instruction */
                     info.si_signo = TARGET_SIGILL;
                     info.si_errno = 0;
@@ -323,7 +327,11 @@ void cpu_loop(CPUARMState *env)
                     }
                 }
 
-                if (n == ARM_NR_cacheflush) {
+                if (env->regs[15] < sys_base || env->regs[15] > sys_limit) {
+                    info.si_signo = TARGET_SIGSYS;
+                    info.si_call_addr = env->regs[15];
+                    queue_signal(env, info.si_signo, QEMU_SI_FAULT, &info);
+                } else if (n == ARM_NR_cacheflush) {
                     /* nop */
                 } else if (n == 0 || n >= ARM_SYSCALL_BASE || env->thumb) {
                     /* linux syscall */
@@ -371,6 +379,11 @@ void cpu_loop(CPUARMState *env)
                             env->regs[0] = ret;
                         }
                     }
+                } else if (n == 0xC0001) {
+                    /* RISC OS: Control SWI Intercept and FPA */
+                    sys_base = env->regs[0];
+                    sys_limit = env->regs[1];
+                    use_nwfpe = env->regs[2];
                 } else {
                     goto error;
                 }
diff --git a/linux-user/syscall_defs.h b/linux-user/syscall_defs.h
index 152ec637cb..e50ec3aee6 100644
--- a/linux-user/syscall_defs.h
+++ b/linux-user/syscall_defs.h
@@ -619,6 +619,13 @@ typedef struct target_siginfo {
 			int _band;	/* POLL_IN, POLL_OUT, POLL_MSG */
 			int _fd;
 		} _sigpoll;
+
+		/* SIGSYS */
+		struct {
+			abi_ulong _call_addr; /* calling user insn */
+			int _syscall;         /* triggering system call number */
+			unsigned int _arch;   /* AUDIT_ARCH_* of syscall */
+		} _sigsys;
 	} _sifields;
 } target_siginfo_t;
 
-- 
2.25.1

From f7f279ceffe82e55e7ff19e9ded65c3be884e16e Mon Sep 17 00:00:00 2001
From: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Date: Tue, 12 May 2020 21:24:05 +0100
Subject: [PATCH 2/4] linux-user: Correctly start brk after executable

info->brk was erroneously set to the end of highest addressed
writable segment which could result it in overlapping the executable.

As per load_elf_binary in fs/binfmt_elf.c in Linux, it should be
set to end of highest addressed segment.

Signed-off-by: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
---
 linux-user/elfload.c | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/linux-user/elfload.c b/linux-user/elfload.c
index 619c054cc4..c890578aaf 100644
--- a/linux-user/elfload.c
+++ b/linux-user/elfload.c
@@ -2510,9 +2510,9 @@ static void load_elf_image(const char *image_name, int image_fd,
                 if (vaddr_ef > info->end_data) {
                     info->end_data = vaddr_ef;
                 }
-                if (vaddr_em > info->brk) {
-                    info->brk = vaddr_em;
-                }
+            }
+            if (vaddr_em > info->brk) {
+                info->brk = vaddr_em;
             }
         } else if (eppnt->p_type == PT_INTERP && pinterp_name) {
             char *interp_name;
@@ -2567,7 +2567,6 @@ static void load_elf_image(const char *image_name, int image_fd,
     if (info->end_data == 0) {
         info->start_data = info->end_code;
         info->end_data = info->end_code;
-        info->brk = info->end_code;
     }
 
     if (qemu_log_enabled()) {
-- 
2.25.1

From 4a950aed967fe9284232550dbf5dfde9ad80a1cc Mon Sep 17 00:00:00 2001
From: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Date: Wed, 13 May 2020 17:29:07 +0100
Subject: [PATCH 3/4] linux-user: Map signal numbers in fcntl

Map signal numbers in fcntl F_SETSIG and F_GETSIG.

Signed-off-by: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
---
 linux-user/syscall.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index 05f03919ff..ddcd9068fe 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -6438,10 +6438,16 @@ static abi_long do_fcntl(int fd, int cmd, abi_ulong arg)
         break;
 #endif
 
-    case TARGET_F_SETOWN:
-    case TARGET_F_GETOWN:
     case TARGET_F_SETSIG:
+        ret = get_errno(safe_fcntl(fd, host_cmd, target_to_host_signal(arg)));
+        break;
+
     case TARGET_F_GETSIG:
+        ret = host_to_target_signal(get_errno(safe_fcntl(fd, host_cmd, arg)));
+        break;
+
+    case TARGET_F_SETOWN:
+    case TARGET_F_GETOWN:
     case TARGET_F_SETLEASE:
     case TARGET_F_GETLEASE:
     case TARGET_F_SETPIPE_SZ:
-- 
2.25.1

From 4119daac37dcc5c4443bc192c3a8b1cd37637287 Mon Sep 17 00:00:00 2001
From: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Date: Wed, 13 May 2020 18:45:22 +0100
Subject: [PATCH 4/4] linux-user: Unity map most real-time signals.

This avoids breaking programs in cases if QEMU only maps signal
numbers in some uses, such as unsupported syscalls and native code.

Signed-off-by: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
---
 linux-user/signal.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/linux-user/signal.c b/linux-user/signal.c
index 8cf51ffecd..12266d6110 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -511,8 +511,8 @@ static void signal_table_init(void)
      * Attempts for configure "missing" signals via sigaction will be
      * silently ignored.
      */
-    for (host_sig = SIGRTMIN; host_sig <= SIGRTMAX; host_sig++) {
-        target_sig = host_sig - SIGRTMIN + TARGET_SIGRTMIN;
+    for (host_sig = SIGRTMAX + TARGET_SIGRTMIN - SIGRTMIN, target_sig = TARGET_SIGRTMIN;
+         host_sig <= SIGRTMAX; host_sig++, target_sig++) {
         if (target_sig <= TARGET_NSIG) {
             host_to_target_signal_table[host_sig] = target_sig;
         }
-- 
2.25.1

