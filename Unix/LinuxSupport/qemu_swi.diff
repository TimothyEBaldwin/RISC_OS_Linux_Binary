From 3962afcb6fdc10f442f101df290d7425e08710e4 Mon Sep 17 00:00:00 2001
From: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Date: Thu, 23 Aug 2018 21:47:34 +0100
Subject: [PATCH 1/2] linux-user: SWI Intercept and disable FPA (for RISC OS)

Signed-off-by: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
---
 linux-user/arm/cpu_loop.c | 19 +++++++++++++++++--
 linux-user/syscall_defs.h |  7 +++++++
 2 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/linux-user/arm/cpu_loop.c b/linux-user/arm/cpu_loop.c
index 3d272b56ef..51154aa304 100644
--- a/linux-user/arm/cpu_loop.c
+++ b/linux-user/arm/cpu_loop.c
@@ -225,6 +225,10 @@ static bool insn_is_linux_bkpt(uint32_t opcode, bool is_thumb)
 
 void cpu_loop(CPUARMState *env)
 {
+    static bool use_nwfpe = true;
+    static abi_ulong sys_base = 0;
+    static abi_ulong sys_limit = 0xFFFFFFFF;
+
     CPUState *cs = env_cpu(env);
     int trapnr;
     unsigned int n, insn;
@@ -262,7 +266,7 @@ void cpu_loop(CPUARMState *env)
                     goto excp_debug;
                 }
 
-                rc = EmulateAll(opcode, &ts->fpa, env);
+                rc = use_nwfpe && EmulateAll(opcode, &ts->fpa, env);
                 if (rc == 0) { /* illegal instruction */
                     info.si_signo = TARGET_SIGILL;
                     info.si_errno = 0;
@@ -326,6 +330,12 @@ void cpu_loop(CPUARMState *env)
             {
                 env->eabi = 1;
                 /* system call */
+                if (env->regs[15] < sys_base || env->regs[15] > sys_limit) {
+                    info.si_signo = TARGET_SIGSYS;
+                    info.si_call_addr = env->regs[15];
+                    queue_signal(env, info.si_signo, QEMU_SI_FAULT, &info);
+                    break;
+                }
                 if (env->thumb) {
                     /* Thumb is always EABI style with syscall number in r7 */
                     n = env->regs[7];
@@ -370,7 +380,12 @@ void cpu_loop(CPUARMState *env)
                         env->regs[0] = cpu_get_tls(env);
                         break;
                     default:
-                        if (n < 0xf0800) {
+                        if (n == (0xC0001 ^ ARM_SYSCALL_BASE)) {
+                            /* RISC OS: Control SWI Intercept and FPA */
+                            sys_base = env->regs[0];
+                            sys_limit = env->regs[1];
+                            use_nwfpe = env->regs[2];
+                        } else if (n < 0xf0800) {
                             /*
                              * Syscalls 0xf0000..0xf07ff (or 0x9f0000..
                              * 0x9f07ff in OABI numbering) are defined
diff --git a/linux-user/syscall_defs.h b/linux-user/syscall_defs.h
index cabbfb762d..ab77f9c6e2 100644
--- a/linux-user/syscall_defs.h
+++ b/linux-user/syscall_defs.h
@@ -657,6 +657,13 @@ typedef struct target_siginfo {
 			int _band;	/* POLL_IN, POLL_OUT, POLL_MSG */
 			int _fd;
 		} _sigpoll;
+
+		/* SIGSYS */
+		struct {
+			abi_ulong _call_addr; /* calling user insn */
+			int _syscall;         /* triggering system call number */
+			unsigned int _arch;   /* AUDIT_ARCH_* of syscall */
+		} _sigsys;
 	} _sifields;
 } target_siginfo_t;
 
-- 
2.27.0

From ab72f22ab469a5283ceedf3dd8f9b31d60ea2bb2 Mon Sep 17 00:00:00 2001
From: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Date: Wed, 13 May 2020 18:45:22 +0100
Subject: [PATCH 2/2] linux-user: Unity map most real-time signals.

This avoids breaking programs in cases if QEMU only maps signal
numbers in some uses, such as unsupported syscalls and native code.

Signed-off-by: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
---
 linux-user/signal.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/linux-user/signal.c b/linux-user/signal.c
index 73de934c65..fcdc89bfb2 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -511,8 +511,8 @@ static void signal_table_init(void)
      * Attempts for configure "missing" signals via sigaction will be
      * silently ignored.
      */
-    for (host_sig = SIGRTMIN; host_sig <= SIGRTMAX; host_sig++) {
-        target_sig = host_sig - SIGRTMIN + TARGET_SIGRTMIN;
+    for (host_sig = SIGRTMAX + TARGET_SIGRTMIN - SIGRTMIN, target_sig = TARGET_SIGRTMIN;
+         host_sig <= SIGRTMAX; host_sig++, target_sig++) {
         if (target_sig <= TARGET_NSIG) {
             host_to_target_signal_table[host_sig] = target_sig;
         }
-- 
2.27.0

