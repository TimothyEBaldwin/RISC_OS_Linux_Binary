#!/bin/bash
#
# Copyright (c) 2018, Timothy Baldwin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

: ${RISC_OS__OpenTerm:=0}

term=
choose_term() {
  for term in xterm x-terminal-emulator konsole gnome-terminal mate-terminal
  do
    if command -v $term 2>/dev/null; then
      return 0
    fi
  done
  return 1
}

readonly() {
  RISC_OS__BWRAP_EXTRA="$RISC_OS__BWRAP_EXTRA --ro-bind ${1@Q} ${1@Q}"
}

readwrite() {
  RISC_OS__BWRAP_EXTRA="$RISC_OS__BWRAP_EXTRA --bind ${1@Q} ${1@Q}"
}

init_make_opts() {
  make_opts=( -f Support/common.mk script-all )
  if [[ "$RISC_OS__INSECURE" == "YES" ]]; then
    make_opts+=( INSECURE=YES )
  else
    make_opts+=( Built/seccomp- )
  fi
}

gui_make_opts() {
  eval "gui=( ${RISC_OS__GUI:=Built/sdl} )"
  if [[ $gui == Built/sdl || $gui == Built/opengl ]]; then
    make_opts+=( -f Unix/SocketKVMFrontends/build.mk "$gui" )
  fi
}

run_make() {
  if ! make --question "${make_opts[@]}"; then
    if [[ $RISC_OS__OpenTerm -gt 0 ]]; then
      choose_term
      term="$term -e"
    fi
    {
      mkdir -p Built
      test "$(
        $term flock Built bash -x -c '
          set -eo pipefail
          make -j$(getconf _NPROCESSORS_ONLN) "${@:0}" 2>&1 5>&- | tee Built/build_log
          echo Finished >&5' \
        "${make_opts[@]}" 5>&1 1>&6 6>&-
      )" == "Finished"
    } 6>&1
  fi
}

if [[ -r config ]]; then
  . config
fi

if [[ $RISC_OS__OpenTerm -gt 0 ]]; then
  exec >/dev/null </dev/null
  exec 2> >(cat >&2)
fi

init_make_opts
gui_make_opts
run_make

shopt -s nullglob
nvram=('HardDisc4/!Boot/CMOS',??? 'HardDisc4/!Boot/CMOS')

: ${RISC_OS_Alias_IXFSBoot:='/<IXFS$HardDisc4>.!Boot'}
export RISC_OS_Alias_IXFSBoot
eval "bwrap_extra=($RISC_OS__BWRAP_EXTRA)"

if [[ "$RISC_OS__INSECURE" == "YES" ]]; then
  RISC_OS_IXFS_HardDisc4='IXFS:$.dev.fd.5.HardDisc4' $RISC_OS__GUI Built/wrapper ./RISC_OS --nvram "$nvram" 5<.
else
  . Built/sandbox_config_sh
  if [[ "$use_seccomp" == "true" ]]; then
    exec 9<Built/seccomp-
    auto_bwrap_args+=(--seccomp 9)
  else
    auto_bwrap_args+=(--new-session)
  fi
  RISC_OS_IXFS_HardDisc4='IXFS:$.HardDisc4' $RISC_OS__GUI Built/wrapper \
  bwrap --unshare-all --tmpfs / --proc /proc --dev /dev \
  "${auto_bwrap_args[@]}" \
  --ro-bind RISC_OS /RISC_OS \
  --bind HardDisc4 /HardDisc4 --chdir / \
  "${bwrap_extra[@]}" \
  --remount-ro / \
  $QEMU /RISC_OS --nvram "$nvram"
fi
